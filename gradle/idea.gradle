/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'idea'

idea {
    project {
        jdkName = targetCompatibility
        languageLevel = targetCompatibility
        wildcards += 'logback.groovy'

        ipr {
            withXml { provider ->
                def node = provider.asNode()

                def codestyle = new XmlParser().parse(file('gradle/idea-codestyle.xml'))
                node.append(codestyle)

                def inspections = new XmlParser().parse(file('gradle/idea-inspections.xml'))
                node.append(inspections)

                def entrypoints = new XmlParser().parse(file('gradle/idea-entrypoints.xml'))
                node.append(entrypoints)

                def compilerConfig = node.component.find { it.'@name' == 'CompilerConfiguration' }
                compilerConfig.getByName('annotationProcessing').each { compilerConfig.remove(it) }
                def annotationProcessing = compilerConfig.appendNode('annotationProcessing')
                annotationProcessing.appendNode('profile', ['default': true, 'name': 'Default', 'enabled': true]).appendNode('processorPath', ['useClasspath': true])

                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                node.remove(copyrightManager)
                def copyright = new XmlParser().parse(file('gradle/idea-copyright.xml'))
                node.append(copyright)

                def vcsDirectoryMappings = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                def mappings = vcsDirectoryMappings.iterator()
                while (mappings.hasNext()) {
                    mappings.next()
                    mappings.remove()
                }

                def gitRoot = file('.git')
                if (gitRoot.exists()) {
                    vcsDirectoryMappings.appendNode('mapping', ['directory': gitRoot.parentFile, 'vcs': 'Git'])
                }
            }
        }
    }
}
